*,
*::before,
*::after {
  box-sizing: border-box;
}

:root {
  --accent-color: #ff6700;
  --blue: #3a6ea5;
  --blue-shade: #004e98;
  --silver: #ebebeb;
  --silver-shade: #c0c0c0;
  --text-color: #444;
}

html {
  font-size: 62.5%;
}

body {
  color: var(--text-color);
  font: 1.6rem/1.6 sans-serif;
  margin: 0;
}

/** General heading styles.
    Responsible mostly for non-layout styles like line-height.
*/

.heading {
  line-height: 1.2;
  text-align: center;
}

/** General link styles. */

.link {
  text-decoration: none;
}

.link:link,
.link:visited {
  color: var(--accent-color);
}

.link:hover {
  text-decoration: underline;
}

/** Inversed link colors for use on dark backgrounds. */

.link_inversed:link,
.link_inversed:visited {
  color: var(--silver);
}

/** Generic guttered container.
    Direct children must be .container__content or they'll be placed in the
    gutter.
*/

.container {
  --min-gutter-width: 2rem;
  display: grid;
  grid-template-columns:
    [full-start] minmax(var(--min-gutter-width), 1fr)
    [content-start] minmax(auto, 100rem)
    [content-end] minmax(var(--min-gutter-width), 1fr)
    [full-end];
}

/** Container with a blue background and silver color */

.container_theme_inverse {
  background-color: var(--blue);
  color: var(--silver);
}

.container_gutter_wide {
  --min-gutter-width: 5rem;
}

.container__content {
  grid-column: content;
}

/** The page's welcome section.

    1. 100vh height as specified by the project requirements.
*/

.welcome-section {
  background: linear-gradient(
    to bottom right,
    var(--silver),
    var(--silver-shade)
  );
  height: 100vh; /* 1 */
}

/** Inner welcome-section element for vertical centering. */

.welcome-section__inner {
  align-items: center;
  display: grid;
}

.welcome-section__title {
  font-size: 3.2rem;
  text-align: right;
}

/* 1. Increase font-size when viewport is wide enough (around 600px) */

@media screen and (min-width: 37.5em) {
  .welcome-section__title {
    font-size: 4rem; /* 1 */
  }
}

/** Project gallery.

    Example usage:
    <div class="gallery">
      <figure class="gallery__item">
        <img class="gallery__thumbnail" ...>
        <figcaption class="gallery__caption">...</figcaption>
      </figure>
      <figure class="gallery__item">...</figure>
      ...
    </div>

    1. Make as many columns as possible, with around 250px as the column's
    minimum width.
    2. Just enough gap to limit grid to just three columns if the gallery is
    restricted to be 1000px wide (as is the case for this page).
*/

.gallery {
  display: grid;
  gap: 7rem; /* 2 */
  grid-template-columns: repeat(auto-fill, minmax(25rem, 1fr)); /* 1 */
  justify-items: center;
}

/*
  1. If ever .gallery__item is used on a `<figure>`, remove its default
  margins.
*/

.gallery__item {
  background-color: #fff;
  box-shadow: 0 0.2rem 0.4rem rgba(0, 0, 0, 0.4);
  margin: 0; /* 1 */
}

/*
  1. Standard responsive image styles.
*/

.gallery__thumbnail {
  display: block; /* 1 */
  height: auto; /* 1 */
  max-width: 100%; /* 1 */
}

.gallery__caption {
  padding: 2rem;
  text-align: center;
}

/** Block for contact icons.
    Children should be .contact-icons__item. For now optimized for just three
    icons in a row.

    Example usage:
    <div class="contact-icons">
      <div class="contact-icons__item">
        <span class="contact-icons__icon"></span>
      </div>
      ...
    </div>

    1. I'd like to use `space-evenly`, but support isn't very good. Shame.
*/

.contact-icons {
  display: flex;
  justify-content: space-around; /* 1 */
}

/**
  1. 15rem should be a good enough flex-basis. Shorter values will cause the
  icons to not align properly (i.e., the middle icon is not centered because of
  variable text lengths).
  2. Center the icon within horizontally.
*/

.contact-icons__item {
  flex-basis: 15rem; /* 1 */
  text-align: center; /* 2 */
}

/** Styles for the icon itself.

    1. The `em` measurement is based on how Font Awesome sets its font sizes. I
    think the most straightforward way to modify the icon size is by using the
    same measurement system as FA.
*/

.contact-icons__icon {
  font-size: 3em; /* 1 */
}

@media screen and (min-width: 37.5em) {
  .contact-icons__icon {
    font-size: 4em; /* 1 */
  }
}

/** The container for the GitHub repo link. It's simpler this way than using
    a .container and making a modifier for it

    1. Set to flex to prevent the inner `<p>`'s margins from leaking out (and
    therefore having that white gap between it and the browser's bottom edge.
    Much simpler than killing the `<p>`'s margins and setting this element's
    padding.
    2. Substitute for `text-align: center`.
*/

.github {
  background-color: var(--blue-shade);
  display: flex; /* 1 */
  justify-content: center; /* 2 */
}
